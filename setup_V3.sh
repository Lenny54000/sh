#!/bin/bash

# =============================================================================
# Script d'installation compl√®te pour Ubuntu Server 24.04.3 LTS
# Inclut configuration syst√®me, outils de d√©veloppement et Freqtrade
# Version corrig√©e avec s√©curit√© renforc√©e et utilisateur d√©di√©
# =============================================================================

set -euo pipefail  # Arr√™ter en cas d'erreur

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables globales
PYTHON_VERSION="3.11.9"  # Version stable pour compatibilit√© TF/PyTorch
FREQTRADE_USER="freqtrade"
FREQTRADE_HOME="/home/$FREQTRADE_USER"
FREQTRADE_DIR="$FREQTRADE_HOME/freqtrade"
VENV_DIR="$FREQTRADE_HOME/freqtrade_env"
SECRETS_DIR="$FREQTRADE_HOME/.secrets"
LOGFILE="/tmp/ubuntu_setup_$(date +%Y%m%d_%H%M%S).log"
MAX_RETRIES=3

# Fonction de retry
retry() {
    local n=1
    local max=$MAX_RETRIES
    local delay=5
    while true; do
        "$@" && break || {
            if [[ $n -lt $max ]]; then
                ((n++))
                log_warning "Commande √©chou√©e. Tentative $n/$max dans ${delay}s..."
                sleep $delay
            else
                log_error "La commande a √©chou√© apr√®s $n tentatives."
                return 1
            fi
        }
    done
}

# Fonction de logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOGFILE"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOGFILE"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$LOGFILE"
}

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a "$LOGFILE"
}

# V√©rifier si on est root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        log_error "Ce script ne doit pas √™tre ex√©cut√© en tant que root"
        log_error "Il utilise sudo quand n√©cessaire"
        exit 1
    fi
}

# Nettoyer les anciens logs
cleanup_logs() {
    log_info "Nettoyage des anciens logs..."
    sudo find /tmp -name "ubuntu_setup_*.log" -mtime +7 -delete 2>/dev/null || true
    chmod 600 "$LOGFILE"  # S√©curiser le fichier de log
}

# Cr√©er un utilisateur d√©di√© pour Freqtrade
create_freqtrade_user() {
    log "üë§ Cr√©ation de l'utilisateur d√©di√© $FREQTRADE_USER..."
    
    if ! id "$FREQTRADE_USER" &>/dev/null; then
        sudo useradd -m -s /bin/bash -G docker "$FREQTRADE_USER"
        
        # Cr√©er les r√©pertoires n√©cessaires
        sudo mkdir -p "$SECRETS_DIR"
        sudo mkdir -p "$FREQTRADE_DIR"
        sudo mkdir -p "$VENV_DIR"
        
        # D√©finir les permissions
        sudo chown -R "$FREQTRADE_USER:$FREQTRADE_USER" "$FREQTRADE_HOME"
        sudo chmod 700 "$SECRETS_DIR"
        
        log "‚úÖ Utilisateur $FREQTRADE_USER cr√©√©"
    else
        log_info "Utilisateur $FREQTRADE_USER existe d√©j√†"
        # V√©rifier les permissions
        sudo chown -R "$FREQTRADE_USER:$FREQTRADE_USER" "$FREQTRADE_HOME" 2>/dev/null || true
        sudo chmod 700 "$SECRETS_DIR" 2>/dev/null || true
    fi
}

# 1Ô∏è‚É£ Configuration du clavier AZERTY
configure_keyboard() {
    log "üéπ Configuration du clavier AZERTY..."
    
    # Configuration locale
    sudo tee /etc/default/keyboard > /dev/null <<EOF
XKBMODEL="pc105"
XKBLAYOUT="fr"
XKBVARIANT=""
XKBOPTIONS=""
BACKSPACE="guess"
EOF

    # Appliquer la configuration
    sudo setupcon -k --force || true
    sudo localectl set-keymap fr || true
    
    log "‚úÖ Clavier AZERTY configur√©"
}

# 2Ô∏è‚É£ Mise √† jour du syst√®me avec retry
update_system() {
    log "üîÑ Mise √† jour du syst√®me..."
    
    retry sudo apt update
    retry sudo apt upgrade -y
    sudo apt autoremove -y
    sudo apt autoclean
    
    log "‚úÖ Syst√®me mis √† jour"
}

# 3Ô∏è‚É£ Installation des outils syst√®me essentiels
install_essential_tools() {
    log "üõ†Ô∏è Installation des outils syst√®me essentiels..."
    
    retry sudo apt install -y \
        build-essential \
        curl \
        wget \
        unzip \
        zip \
        tar \
        git \
        htop \
        tmux \
        screen \
        ncdu \
        tree \
        mc \
        vim \
        nano \
        software-properties-common \
        apt-transport-https \
        ca-certificates \
        gnupg \
        lsb-release \
        jq
    
    log "‚úÖ Outils essentiels install√©s"
}

# 4Ô∏è‚É£ Gestion de paquets et versions Python
install_package_managers() {
    log "üì¶ Installation des gestionnaires de paquets..."
    
    # Snap est d√©j√† install√© sur Ubuntu 24.04
    sudo snap refresh
    
    # Installation compl√®te des d√©pendances pour compiler Python
    retry sudo apt install -y \
        make \
        build-essential \
        libssl-dev \
        zlib1g-dev \
        libbz2-dev \
        libreadline-dev \
        libsqlite3-dev \
        wget \
        curl \
        llvm \
        libncursesw5-dev \
        libncurses5-dev \
        xz-utils \
        tk-dev \
        libxml2-dev \
        libxmlsec1-dev \
        libffi-dev \
        liblzma-dev \
        python3-openssl
    
    # Installation de pyenv pour l'utilisateur courant ET freqtrade
    install_pyenv_for_user "$USER"
    install_pyenv_for_user "$FREQTRADE_USER"
    
    log "‚úÖ Gestionnaires de paquets install√©s"
}

install_pyenv_for_user() {
    local target_user="$1"
    local target_home
    
    if [ "$target_user" = "root" ]; then
        target_home="/root"
    else
        target_home="/home/$target_user"
    fi
    
    if [ ! -d "$target_home/.pyenv" ]; then
        log_info "Installation de pyenv pour $target_user..."
        
        if [ "$target_user" = "$USER" ]; then
            curl https://pyenv.run | bash
        else
            sudo -u "$target_user" bash -c 'curl https://pyenv.run | bash'
        fi
        
        # Configuration du shell (idempotente)
        local bashrc="$target_home/.bashrc"
        if [ "$target_user" = "$USER" ]; then
            if ! grep -q 'pyenv init' "$bashrc" 2>/dev/null; then
                {
                    echo ''
                    echo '# Pyenv configuration'
                    echo 'export PYENV_ROOT="$HOME/.pyenv"'
                    echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"'
                    echo 'eval "$(pyenv init -)"'
                } >> "$bashrc"
            fi
        else
            sudo -u "$target_user" bash -c "
                if ! grep -q 'pyenv init' '$bashrc' 2>/dev/null; then
                    cat >> '$bashrc' <<'PYENV_EOF'

# Pyenv configuration
export PYENV_ROOT=\"\$HOME/.pyenv\"
command -v pyenv >/dev/null || export PATH=\"\$PYENV_ROOT/bin:\$PATH\"
eval \"\$(pyenv init -)\"
PYENV_EOF
                fi
            "
        fi
    else
        log_info "pyenv d√©j√† install√© pour $target_user"
    fi
}

# 5Ô∏è‚É£ Outils r√©seau et tests
install_network_tools() {
    log "üåê Installation des outils r√©seau..."
    
    retry sudo apt install -y \
        net-tools \
        nmap \
        traceroute \
        iputils-ping \
        openssh-client \
        openssh-server \
        netcat-openbsd \
        dnsutils \
        whois
    
    log "‚úÖ Outils r√©seau install√©s"
}

# 6Ô∏è‚É£ Bases de donn√©es et stockage
install_databases() {
    log "üóÑÔ∏è Installation des bases de donn√©es..."
    
    # SQLite
    retry sudo apt install -y sqlite3 libsqlite3-dev
    
    # PostgreSQL
    retry sudo apt install -y postgresql postgresql-contrib postgresql-client libpq-dev
    
    # MySQL/MariaDB
    retry sudo apt install -y mariadb-server mariadb-client libmariadb-dev
    
    # Redis
    retry sudo apt install -y redis-server redis-tools
    
    # D√©marrer et activer les services
    sudo systemctl enable postgresql
    sudo systemctl start postgresql
    sudo systemctl enable mariadb
    sudo systemctl start mariadb
    sudo systemctl enable redis-server
    sudo systemctl start redis-server
    
    log "‚úÖ Bases de donn√©es install√©es"
}

# 7Ô∏è‚É£ Installation de Python via pyenv
install_python() {
    log "üêç Installation de Python $PYTHON_VERSION via pyenv..."
    
    install_python_for_user "$USER"
    install_python_for_user "$FREQTRADE_USER"
    
    log "‚úÖ Python $PYTHON_VERSION install√© pour tous les utilisateurs"
}

install_python_for_user() {
    local target_user="$1"
    local target_home
    
    if [ "$target_user" = "root" ]; then
        target_home="/root"
    else
        target_home="/home/$target_user"
    fi
    
    # Commandes pour l'utilisateur sp√©cifique
    if [ "$target_user" = "$USER" ]; then
        # Charger pyenv pour l'utilisateur courant
        export PYENV_ROOT="$target_home/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init -)" 2>/dev/null || true
        
        # V√©rifier si Python est d√©j√† install√©
        if ! pyenv versions | grep -q "$PYTHON_VERSION"; then
            log_info "Compilation et installation de Python $PYTHON_VERSION pour $target_user..."
            retry pyenv install "$PYTHON_VERSION"
        else
            log_info "Python $PYTHON_VERSION d√©j√† install√© pour $target_user"
        fi
        
        # D√©finir comme version globale
        pyenv global "$PYTHON_VERSION"
        
        # Mettre √† jour pip
        pip install --upgrade pip setuptools wheel
    else
        sudo -u "$target_user" bash -c "
            export PYENV_ROOT='$target_home/.pyenv'
            export PATH='\$PYENV_ROOT/bin:\$PATH'
            eval '\$(pyenv init -)' 2>/dev/null || true
            
            if ! pyenv versions | grep -q '$PYTHON_VERSION'; then
                echo 'Installation de Python $PYTHON_VERSION pour $target_user...'
                pyenv install '$PYTHON_VERSION'
            fi
            
            pyenv global '$PYTHON_VERSION'
            pip install --upgrade pip setuptools wheel
        "
    fi
}

# 8Ô∏è‚É£ D√©veloppement Python et science des donn√©es
install_python_packages() {
    log "üìä Installation des packages Python pour la science des donn√©es..."
    
    # Packages de base avec versions pin√©es pour stabilit√©
    pip install --upgrade \
        virtualenv \
        virtualenvwrapper \
        'numpy>=1.21.0,<2.0' \
        'pandas>=1.3.0,<2.1' \
        'scipy>=1.7.0,<1.12' \
        'matplotlib>=3.4.0,<3.8' \
        'seaborn>=0.11.0,<0.13' \
        'plotly>=5.0.0,<6.0' \
        'scikit-learn>=1.0.0,<1.4' \
        'jupyter>=1.0.0' \
        'jupyterlab>=3.0.0' \
        'flask>=2.0.0,<3.0' \
        'django>=4.0.0,<5.0' \
        'fastapi>=0.68.0' \
        'uvicorn[standard]>=0.15.0' \
        'requests>=2.25.0' \
        'beautifulsoup4>=4.9.0' \
        'lxml>=4.6.0'
    
    # TensorFlow et PyTorch avec gestion d'erreur
    install_ml_packages
    
    log "‚úÖ Packages Python install√©s"
}

install_ml_packages() {
    log_info "Installation de TensorFlow et PyTorch..."
    
    # TensorFlow
    if pip install 'tensorflow>=2.10.0,<2.16'; then
        log_info "TensorFlow install√© avec succ√®s"
    else
        log_warning "√âchec installation TensorFlow - continuons sans"
    fi
    
    # PyTorch (CPU)
    if pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu; then
        log_info "PyTorch install√© avec succ√®s"
    else
        log_warning "√âchec installation PyTorch - continuons sans"
    fi
}

# 9Ô∏è‚É£ Outils de debug et qualit√© du code
install_dev_tools() {
    log "üîç Installation des outils de d√©veloppement..."
    
    pip install \
        black \
        isort \
        'flake8>=4.0.0' \
        'mypy>=0.900' \
        'pytest>=6.0.0' \
        'pytest-cov>=2.10.0' \
        'bandit>=1.7.0' \
        'safety>=1.10.0'
    
    retry sudo apt install -y \
        strace \
        lsof \
        gdb \
        valgrind
    
    log "‚úÖ Outils de d√©veloppement install√©s"
}

# üîü Docker et virtualisation avec v√©rifications idempotentes
install_docker() {
    log "üê≥ Installation de Docker et Docker Compose..."
    
    # Supprimer les anciennes versions
    sudo apt remove -y docker.io docker-doc docker-compose podman-docker containerd runc 2>/dev/null || true
    
    # V√©rifier et ajouter la cl√© GPG Docker (idempotent)
    if [ ! -f /etc/apt/keyrings/docker.gpg ]; then
        sudo mkdir -p /etc/apt/keyrings
        retry curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        sudo chmod a+r /etc/apt/keyrings/docker.gpg
        log_info "Cl√© GPG Docker ajout√©e"
    else
        log_info "Cl√© GPG Docker d√©j√† pr√©sente"
    fi
    
    # V√©rifier et ajouter le repository Docker (idempotent)
    if [ ! -f /etc/apt/sources.list.d/docker.list ]; then
        echo \
          "deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          \"$(. /etc/os-release && echo \"$VERSION_CODENAME\")\" stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        log_info "Repository Docker ajout√©"
    else
        log_info "Repository Docker d√©j√† pr√©sent"
    fi
    
    # Installer Docker
    retry sudo apt update
    retry sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    
    # Ajouter les utilisateurs au groupe docker
    sudo usermod -aG docker "$USER"
    sudo usermod -aG docker "$FREQTRADE_USER"
    
    # D√©marrer Docker
    sudo systemctl enable docker
    sudo systemctl start docker
    
    # VirtualBox et Vagrant
    retry sudo apt install -y virtualbox vagrant
    
    log "‚úÖ Docker, VirtualBox et Vagrant install√©s"
}

# 1Ô∏è‚É£1Ô∏è‚É£ Outils "couteaux suisses"
install_swiss_army_tools() {
    log "üîß Installation des outils utilitaires..."
    
    retry sudo apt install -y \
        ffmpeg \
        imagemagick \
        rsync \
        cron \
        shellcheck \
        parallel \
        pv \
        silversearcher-ag \
        ripgrep \
        fd-find \
        bat \
        exa
    
    # Configuration d'alias utiles (idempotente)
    configure_aliases
    
    log "‚úÖ Outils utilitaires install√©s"
}

configure_aliases() {
    local alias_block='
# Alias personnalis√©s Freqtrade Setup
alias ll="ls -alF"
alias la="ls -A"
alias l="ls -CF"
alias grep="grep --color=auto"
alias fgrep="fgrep --color=auto"
alias egrep="egrep --color=auto"
alias ..="cd .."
alias ...="cd ../.."
alias h="history"
alias c="clear"
alias df="df -h"
alias du="du -h"
alias free="free -h"
alias ps="ps aux"
alias top="htop"
alias cat="batcat"
alias ls="exa"
alias find="fdfind"
alias python="python3"
alias pip="pip3"

# Fonctions utiles
function mkcd() { mkdir -p "$1" && cd "$1"; }
function extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1   ;;
            *.tar.gz)    tar xzf $1   ;;
            *.bz2)       bunzip2 $1   ;;
            *.rar)       unrar x $1   ;;
            *.gz)        gunzip $1    ;;
            *.tar)       tar xf $1    ;;
            *.tbz2)      tar xjf $1   ;;
            *.tgz)       tar xzf $1   ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1;;
            *.7z)        7z x $1      ;;
            *)           echo "'"'"'$1'"'"' ne peut pas √™tre extrait via extract()" ;;
        esac
    else
        echo "'"'"'$1'"'"' n'"'"'est pas un fichier valide"
    fi
}
# Fin alias personnalis√©s Freqtrade Setup'

    # Ajouter aux deux utilisateurs
    for user in "$USER" "$FREQTRADE_USER"; do
        local user_home
        if [ "$user" = "root" ]; then
            user_home="/root"
        else
            user_home="/home/$user"
        fi
        
        local bashrc="$user_home/.bashrc"
        
        if [ "$user" = "$USER" ]; then
            if ! grep -q "Alias personnalis√©s Freqtrade Setup" "$bashrc" 2>/dev/null; then
                echo "$alias_block" >> "$bashrc"
            fi
        else
            sudo -u "$user" bash -c "
                if ! grep -q 'Alias personnalis√©s Freqtrade Setup' '$bashrc' 2>/dev/null; then
                    cat >> '$bashrc' <<'ALIAS_EOF'
$alias_block
ALIAS_EOF
                fi
            "
        fi
    done
}

# 1Ô∏è‚É£2Ô∏è‚É£ Installation et configuration de Freqtrade
install_freqtrade() {
    log "üöÄ Installation et configuration de Freqtrade..."
    
    # Tout se fait en tant qu'utilisateur freqtrade
    sudo -u "$FREQTRADE_USER" bash -c "
        export PYENV_ROOT='$FREQTRADE_HOME/.pyenv'
        export PATH='\$PYENV_ROOT/bin:\$PATH'
        eval '\$(pyenv init -)' 2>/dev/null || true
        
        cd '$FREQTRADE_HOME'
        
        # Cr√©er l'environnement virtuel d√©di√©
        if [ ! -d '$VENV_DIR' ]; then
            echo 'Cr√©ation de l environment virtuel Freqtrade...'
            python -m venv '$VENV_DIR'
        fi
        
        # Activer l'environnement virtuel et installer
        source '$VENV_DIR/bin/activate'
        pip install --upgrade pip setuptools wheel
        pip install 'freqtrade[all]>=2023.1'
        
        # Cr√©er les r√©pertoires
        mkdir -p '$FREQTRADE_DIR'
        cd '$FREQTRADE_DIR'
        
        # Initialiser la configuration si pas encore fait
        if [ ! -f 'config.json' ]; then
            freqtrade create-userdir --userdir .
        fi
    "
    
    # Cr√©er les fichiers de configuration
    create_freqtrade_config
    create_freqtrade_strategy
    create_freqtrade_scripts
    create_systemd_service
    create_freqtrade_documentation
    
    # S√©curiser les permissions
    sudo chown -R "$FREQTRADE_USER:$FREQTRADE_USER" "$FREQTRADE_HOME"
    sudo chmod 700 "$SECRETS_DIR"
    
    log "‚úÖ Freqtrade install√© et configur√© avec succ√®s!"
}

create_freqtrade_config() {
    log_info "Cr√©ation de la configuration Freqtrade..."
    
    # Cr√©er config.json.template (s√©curis√©)
    sudo -u "$FREQTRADE_USER" bash -c "cat > '$FREQTRADE_DIR/config.json.template' <<'EOF'
{
    \"max_open_trades\": 3,
    \"stake_currency\": \"USDT\",
    \"stake_amount\": 100,
    \"tradable_balance_ratio\": 0.99,
    \"fiat_display_currency\": \"USD\",
    \"dry_run\": true,
    \"dry_run_wallet\": 1000,
    \"cancel_open_orders_on_exit\": false,
    \"trading_mode\": \"spot\",
    \"margin_mode\": \"\",
    \"unfilledtimeout\": {
        \"entry\": 10,
        \"exit\": 10,
        \"exit_timeout_count\": 0,
        \"unit\": \"minutes\"
    },
    \"entry_pricing\": {
        \"price_side\": \"same\",
        \"use_order_book\": true,
        \"order_book_top\": 1,
        \"price_last_balance\": 0.0,
        \"check_depth_of_market\": {
            \"enabled\": false,
            \"bids_to_ask_delta\": 1
        }
    },
    \"exit_pricing\": {
        \"price_side\": \"same\",
        \"use_order_book\": true,
        \"order_book_top\": 1
    },
    \"exchange\": {
        \"name\": \"binance\",
        \"key\": \"YOUR_API_KEY_HERE\",
        \"secret\": \"YOUR_SECRET_KEY_HERE\",
        \"ccxt_config\": {},
        \"ccxt_async_config\": {},
        \"pair_whitelist\": [
            \"BTC/USDT\",
            \"ETH/USDT\",
            \"ADA/USDT\",
            \"DOT/USDT\",
            \"LINK/USDT\"
        ],
        \"pair_blacklist\": []
    },
    \"pairlists\": [
        {
            \"method\": \"StaticPairList\"
        }
    ],
    \"strategy\": \"RSI_MACD_Strategy\",
    \"telegram\": {
        \"enabled\": false,
        \"token\": \"\",
        \"chat_id\": \"\"
    },
    \"api_server\": {
        \"enabled\": false,
        \"listen_ip_address\": \"127.0.0.1\",
        \"listen_port\": 8080,
        \"verbosity\": \"error\",
        \"enable_openapi\": false,
        \"jwt_secret_key\": \"somethingrandom\",
        \"ws_token\": \"sameassecret-but-different\",
        \"CORS_origins\": [],
        \"username\": \"\",
        \"password\": \"\"
    },
    \"bot_name\": \"freqtrade\",
    \"initial_state\": \"running\",
    \"force_entry_enable\": false,
    \"internals\": {
        \"process_throttle_secs\": 5
    }
}
EOF"
    
    # Copier le template vers config.json s'il n'existe pas
    sudo -u "$FREQTRADE_USER" bash -c "
        if [ ! -f '$FREQTRADE_DIR/config.json' ]; then
            cp '$FREQTRADE_DIR/config.json.template' '$FREQTRADE_DIR/config.json'
            chmod 600 '$FREQTRADE_DIR/config.json'
        fi
    "
}

create_freqtrade_strategy() {
    log_info "Installation de la strat√©gie RSI+MACD optimis√©e..."
    
    sudo -u "$FREQTRADE_USER" bash -c "
        mkdir -p '$FREQTRADE_DIR/user_data/strategies'
        
        cat > '$FREQTRADE_DIR/user_data/strategies/RSI_MACD_Strategy.py' <<'STRATEGY_EOF'
# pragma pylint: disable=missing-docstring, invalid-name, pointless-string-statement
# flake8: noqa: F401

import numpy as np
import pandas as pd
from pandas import DataFrame
from datetime import datetime
from typing import Optional, Union

from freqtrade.strategy import IStrategy, IntParameter, DecimalParameter
import talib.abstract as ta
import freqtrade.vendor.qtpylib.indicators as qtpylib


class RSI_MACD_Strategy(IStrategy):
    \"\"\"
    Strat√©gie optimis√©e combinant RSI et MACD pour les signaux d'entr√©e et de sortie
    Version all√©g√©e pour de meilleures performances
    \"\"\"

    # Strategy interface version
    INTERFACE_VERSION = 3

    # Optimal timeframe for the strategy
    timeframe = '5m'

    # Can this strategy go short?
    can_short: bool = False

    # Minimal ROI designed for the strategy
    minimal_roi = {
        \"60\": 0.01,
        \"30\": 0.02,
        \"0\": 0.04
    }

    # Optimal stoploss designed for the strategy
    stoploss = -0.10

    # Trailing stoploss
    trailing_stop = False

    # Parameters optimisables
    buy_rsi = IntParameter(20, 40, default=30, space=\"buy\", optimize=True)
    sell_rsi = IntParameter(60, 80, default=70, space=\"sell\", optimize=True)

    # Run \"populate_indicators()\" only for new candle
    process_only_new_candles = False

    # These values can be overridden in the config
    use_exit_signal = True
    exit_profit_only = False
    ignore_roi_if_entry_signal = False

    # Number of candles the strategy requires before producing valid signals
    startup_candle_count: int = 30

    # Order configuration
    order_types = {
        'entry': 'limit',
        'exit': 'limit',
        'stoploss': 'market',
        'stoploss_on_exchange': False
    }

    order_time_in_force = {
        'entry': 'GTC',
        'exit': 'GTC'
    }

    plot_config = {
        'main_plot': {
            'tema': {},
        },
        'subplots': {
            \"MACD\": {
                'macd': {'color': 'blue'},
                'macdsignal': {'color': 'red'},
            },
            \"RSI\": {
                'rsi': {'color': 'orange'},
            }
        }
    }

    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        \"\"\"
        Ajoute les indicateurs techniques n√©cessaires
        Version optimis√©e avec moins d'indicateurs pour de meilleures performances
        \"\"\"

        # RSI
        dataframe['rsi'] = ta.RSI(dataframe, timeperiod=14)

        # MACD
        macd = ta.MACD(dataframe, fastperiod=12, slowperiod=26, signalperiod=9)
        dataframe['macd'] = macd['macd']
        dataframe['macdsignal'] = macd['macdsignal']
        dataframe['macdhist'] = macd['macdhist']

        # Volume SMA pour validation
        dataframe['volume_mean'] = dataframe['volume'].rolling(window=30).mean()

        # Bollinger Bands pour contexte
        bollinger = qtpylib.bollinger_bands(qtpylib.typical_price(dataframe), window=20, stds=2)
        dataframe['bb_lowerband'] = bollinger['lower']
        dataframe['bb_middleband'] = bollinger['mid']
        dataframe['bb_upperband'] = bollinger['upper']

        # TEMA pour trend
        dataframe['tema'] = ta.TEMA(dataframe, timeperiod=9)

        return dataframe

    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        \"\"\"
        Signaux d'entr√©e bas√©s sur RSI oversold + MACD crossover + volume
        \"\"\"
        dataframe.loc[
            (
                # Signal: RSI oversold
                (dataframe['rsi'] < self.buy_rsi.value) &
                # Signal: MACD above signal line (momentum positif)
                (dataframe['macd'] > dataframe['macdsignal']) &
                # Volume sup√©rieur √† la moyenne
                (dataframe['volume'] > dataframe['volume_mean']) &
                # Prix proche de la bande de Bollinger inf√©rieure
                (dataframe['close'] <= dataframe['bb_lowerband'] * 1.01)
            ),
            'enter_long'] = 1

        return dataframe

    def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        \"\"\"
        Signaux de sortie bas√©s sur RSI overbought + MACD crossunder
        \"\"\"
        dataframe.loc[
            (
                # Signal: RSI overbought
                (dataframe['rsi'] > self.sell_rsi.value) &
                # Signal: MACD below signal line (momentum n√©gatif)
                (dataframe['macd'] < dataframe['macdsignal']) &
                # Volume confirmation
                (dataframe['volume'] > 0)
            ),
            'exit_long'] = 1

        return dataframe
STRATEGY_EOF
    "
}

create_freqtrade_scripts() {
    log_info "Cr√©ation des scripts de gestion Freqtrade..."
    
    # Script de backtest
    sudo -u "$FREQTRADE_USER" bash -c "cat > '$FREQTRADE_DIR/backtest.sh' <<'BACKTEST_EOF'
#!/bin/bash
# Script de backtesting rapide pour Freqtrade

set -e

# Activer l'environnement virtuel
source $VENV_DIR/bin/activate

# Aller dans le r√©pertoire Freqtrade
cd $FREQTRADE_DIR

# T√©l√©charger les donn√©es (derniers 90 jours)
echo \"üìä T√©l√©chargement des donn√©es...\"
freqtrade download-data --timerange 20240101- -t 5m --exchange binance

# Lancer le backtest
echo \"üöÄ Lancement du backtest...\"
freqtrade backtesting --config config.json --strategy RSI_MACD_Strategy --timerange 20240101- -i 5m

echo \"‚úÖ Backtest termin√©!\"
echo \"üìä R√©sultats sauvegard√©s dans user_data/backtest_results/\"
BACKTEST_EOF
chmod +x '$FREQTRADE_DIR/backtest.sh'"
    
    # Script de dry-run s√©curis√©
    sudo -u "$FREQTRADE_USER" bash -c "cat > '$FREQTRADE_DIR/dry_run.sh' <<'DRYRUN_EOF'
#!/bin/bash
# Script de dry-run pour Freqtrade

set -e

# V√©rifier que les cl√©s API ne sont pas les valeurs par d√©faut
if grep -q \"YOUR_API_KEY_HERE\" config.json; then
    echo \"‚ö†Ô∏è  ATTENTION: Configurez vos cl√©s API avant d'utiliser ce script!\"
    echo \"   √âditez le fichier config.json et remplacez:\"
    echo \"   - YOUR_API_KEY_HERE par votre vraie cl√© API\"
    echo \"   - YOUR_SECRET_KEY_HERE par votre vraie cl√© secr√®te\"
    echo \"\"
    echo \"   OU utilisez les variables d'environnement:\"
    echo \"   export FREQTRADE_API_KEY='votre_cle'\"
    echo \"   export FREQTRADE_SECRET_KEY='votre_secret'\"
    echo \"\"
    exit 1
fi

# Activer l'environnement virtuel
source $VENV_DIR/bin/activate

# Aller dans le r√©pertoire Freqtrade
cd $FREQTRADE_DIR

echo \"üîÑ D√©marrage du dry-run...\"
echo \"üìä Mode simulation avec 1000 USDT virtuels\"
echo \"\"

# Lancer le dry-run
freqtrade trade --config config.json --strategy RSI_MACD_Strategy
DRYRUN_EOF
chmod +x '$FREQTRADE_DIR/dry_run.sh'"
    
    # Script d'optimisation
    sudo -u "$FREQTRADE_USER" bash -c "cat > '$FREQTRADE_DIR/hyperopt.sh' <<'HYPEROPT_EOF'
#!/bin/bash
# Script d'optimisation des hyperparam√®tres pour Freqtrade

set -e

# Activer l'environnement virtuel
source $VENV_DIR/bin/activate

# Aller dans le r√©pertoire Freqtrade
cd $FREQTRADE_DIR

echo \"üéØ Optimisation des hyperparam√®tres...\"
echo \"‚è±Ô∏è  Cela peut prendre plusieurs heures\"
echo \"\"

# T√©l√©charger les donn√©es si n√©cessaire
freqtrade download-data --timerange 20240101- -t 5m --exchange binance

# Lancer l'optimisation
freqtrade hyperopt \\
    --config config.json \\
    --strategy RSI_MACD_Strategy \\
    --hyperopt-loss SharpeHyperOptLoss \\
    --spaces buy sell \\
    --epochs 100 \\
    -j 4

echo \"‚úÖ Optimisation termin√©e!\"
echo \"üìä R√©sultats dans user_data/hyperopt_results/\"
HYPEROPT_EOF
chmod +x '$FREQTRADE_DIR/hyperopt.sh'"

    # Script de configuration des cl√©s API
    sudo -u "$FREQTRADE_USER" bash -c "cat > '$FREQTRADE_DIR/setup_api.sh' <<'APISETUP_EOF'
#!/bin/bash
# Script de configuration s√©curis√©e des cl√©s API

set -e

echo \"üîê Configuration des cl√©s API Freqtrade\"
echo \"=======================================\"
echo \"\"

# Cr√©er une copie de sauvegarde
cp config.json config.json.backup

# Demander les cl√©s de mani√®re s√©curis√©e
echo \"Exchange support√©s: binance, coinbasepro, kraken, bittrex...\"
read -p \"Nom de l'exchange [binance]: \" exchange_name
exchange_name=\${exchange_name:-binance}

echo \"\"
echo \"‚ö†Ô∏è  Les cl√©s ne seront pas affich√©es √† l'√©cran\"
read -s -p \"Cl√© API: \" api_key
echo \"\"
read -s -p \"Cl√© secr√®te: \" secret_key
echo \"\"

# Valider que les cl√©s ne sont pas vides
if [ -z \"\$api_key\" ] || [ -z \"\$secret_key\" ]; then
    echo \"‚ùå Erreur: Les cl√©s API et secr√®te sont obligatoires\"
    exit 1
fi

# Remplacer dans le fichier config
sed -i \"s/\\\"name\\\": \\\"binance\\\"/\\\"name\\\": \\\"\$exchange_name\\\"/\" config.json
sed -i \"s/YOUR_API_KEY_HERE/\$api_key/\" config.json
sed -i \"s/YOUR_SECRET_KEY_HERE/\$secret_key/\" config.json

# S√©curiser le fichier
chmod 600 config.json

echo \"\"
echo \"‚úÖ Configuration termin√©e!\"
echo \"üîí Fichier config.json s√©curis√© (permissions 600)\"
echo \"üíæ Sauvegarde cr√©√©e: config.json.backup\"
echo \"\"
echo \"üöÄ Vous pouvez maintenant utiliser:\"
echo \"   ./dry_run.sh     # Pour tester en simulation\"
echo \"   ./backtest.sh    # Pour tester sur donn√©es historiques\"
APISETUP_EOF
chmod +x '$FREQTRADE_DIR/setup_api.sh'"
}

create_systemd_service() {
    log_info "Cr√©ation du service systemd pour Freqtrade..."
    
    sudo tee /etc/systemd/system/freqtrade.service > /dev/null <<EOF
[Unit]
Description=Freqtrade Crypto Trading Bot
After=network.target

[Service]
Type=simple
User=$FREQTRADE_USER
Group=$FREQTRADE_USER
WorkingDirectory=$FREQTRADE_DIR
Environment=PATH=$VENV_DIR/bin:/usr/local/bin:/usr/bin:/bin
ExecStartPre=$VENV_DIR/bin/python -c "import freqtrade; print('Freqtrade version:', freqtrade.__version__)"
ExecStart=$VENV_DIR/bin/freqtrade trade --config config.json --strategy RSI_MACD_Strategy
ExecReload=/bin/kill -HUP \$MAINPID
Restart=on-failure
RestartSec=10
StandardOutput=journal
StandardError=journal

# S√©curit√©
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$FREQTRADE_HOME
PrivateTmp=true
ProtectKernelTunables=true
ProtectKernelModules=true
ProtectControlGroups=true

[Install]
WantedBy=multi-user.target
EOF

    sudo systemctl daemon-reload
    
    # Cr√©er un script de gestion du service
    sudo -u "$FREQTRADE_USER" bash -c "cat > '$FREQTRADE_DIR/service_control.sh' <<'SERVICE_EOF'
#!/bin/bash
# Script de contr√¥le du service Freqtrade

case \"\$1\" in
    start)
        echo \"üöÄ D√©marrage du service Freqtrade...\"
        sudo systemctl start freqtrade
        sudo systemctl status freqtrade --no-pager
        ;;
    stop)
        echo \"üõë Arr√™t du service Freqtrade...\"
        sudo systemctl stop freqtrade
        ;;
    restart)
        echo \"üîÑ Red√©marrage du service Freqtrade...\"
        sudo systemctl restart freqtrade
        sudo systemctl status freqtrade --no-pager
        ;;
    status)
        sudo systemctl status freqtrade --no-pager
        ;;
    logs)
        echo \"üìã Logs Freqtrade (Ctrl+C pour quitter):\"
        sudo journalctl -u freqtrade -f
        ;;
    enable)
        echo \"‚ö° Activation du d√©marrage automatique...\"
        sudo systemctl enable freqtrade
        ;;
    disable)
        echo \"üîå D√©sactivation du d√©marrage automatique...\"
        sudo systemctl disable freqtrade
        ;;
    *)
        echo \"Usage: \$0 {start|stop|restart|status|logs|enable|disable}\"
        echo \"\"
        echo \"Commandes disponibles:\"
        echo \"  start    - D√©marrer Freqtrade\"
        echo \"  stop     - Arr√™ter Freqtrade\"
        echo \"  restart  - Red√©marrer Freqtrade\"
        echo \"  status   - Voir l'√©tat du service\"
        echo \"  logs     - Voir les logs en temps r√©el\"
        echo \"  enable   - D√©marrage automatique\"
        echo \"  disable  - D√©sactiver d√©marrage automatique\"
        exit 1
        ;;
esac
SERVICE_EOF
chmod +x '$FREQTRADE_DIR/service_control.sh'"

    log_info "Service systemd Freqtrade cr√©√©"
}

create_freqtrade_documentation() {
    log_info "Cr√©ation de la documentation..."
    
    sudo -u "$FREQTRADE_USER" bash -c "cat > '$FREQTRADE_DIR/README.md' <<'DOC_EOF'
# üöÄ Configuration Freqtrade

## üîê S√âCURIT√â - PREMI√àRE √âTAPE

### Configuration des cl√©s API (OBLIGATOIRE)
```bash
./setup_api.sh
```
Ce script vous guidera pour configurer vos cl√©s API de fa√ßon s√©curis√©e.

‚ö†Ô∏è **IMPORTANT** :
- Ne JAMAIS commiter le fichier `config.json` avec vos vraies cl√©s
- Le fichier est automatiquement s√©curis√© (chmod 600)
- Une sauvegarde `config.json.backup` est cr√©√©e

## üìä Scripts disponibles

### Tests et backtests
```bash
./backtest.sh      # Test sur donn√©es historiques
./hyperopt.sh      # Optimisation des param√®tres
```

### Trading en simulation
```bash
./dry_run.sh       # Simulation temps r√©el (S√âCURIS√â)
```

### Service en production
```bash
./service_control.sh start     # D√©marrer comme service
./service_control.sh stop      # Arr√™ter le service
./service_control.sh status    # Voir l'√©tat
./service_control.sh logs      # Voir les logs temps r√©el
./service_control.sh enable    # D√©marrage automatique
```

## üéØ D√©marrage rapide

### 1. Tester sans cl√©s API (backtest)
```bash
cd $FREQTRADE_DIR
./backtest.sh
```

### 2. Configurer vos cl√©s et tester en simulation
```bash
./setup_api.sh     # Configurer les cl√©s
./dry_run.sh       # Tester en simulation
```

### 3. Production (ATTENTION: trading r√©el!)
```bash
# Modifier config.json: \"dry_run\": false
./service_control.sh start
```

## üìà Strat√©gie incluse : RSI_MACD_Strategy

### Logique de trading
- **Entr√©e (Long)** : RSI < 30 + MACD > Signal + Volume √©lev√© + Prix pr√®s Bollinger inf.
- **Sortie (Long)** : RSI > 70 + MACD < Signal
- **Stop-loss** : -10%
- **Take-profit** : 4% (imm√©diat), 2% (30min), 1% (1h)

### Param√®tres optimisables
- `buy_rsi` : Seuil RSI d'achat (20-40, d√©faut: 30)
- `sell_rsi` : Seuil RSI de vente (60-80, d√©faut: 70)

## ‚öôÔ∏è Configuration par d√©faut

```json
{
  \"max_open_trades\": 3,
  \"stake_amount\": 100,
  \"dry_run\": true,
  \"dry_run_wallet\": 1000,
  \"timeframe\": \"5m\"
}
```

## üîß Commandes Freqtrade utiles

### Gestion des donn√©es
```bash
# Activer l'environnement
source $VENV_DIR/bin/activate
cd $FREQTRADE_DIR

# T√©l√©charger donn√©es
freqtrade download-data --timerange 20240101- -t 5m --exchange binance

# Lister strat√©gies
freqtrade list-strategies

# Analyser r√©sultats
freqtrade show-trades --config config.json
freqtrade plot-dataframe --config config.json --strategy RSI_MACD_Strategy
```

### Monitoring
```bash
# Logs du service
sudo journalctl -u freqtrade -f

# Statut d√©taill√©
freqtrade status --config config.json
```

## üõ°Ô∏è S√©curit√© et bonnes pratiques

### ‚úÖ Recommandations
- **TOUJOURS** tester en `dry_run` d'abord
- Utiliser des montants petits au d√©but
- Surveiller les premiers trades attentivement
- Activer les notifications Telegram (optionnel)
- Faire des backtests r√©guliers
- Garder des logs de performance

### ‚ö†Ô∏è Avertissements
- Le trading crypto comporte des risques
- Ne tradez jamais plus que ce que vous pouvez perdre
- Les performances pass√©es ne garantissent pas les futures
- Surveillez votre bot r√©guli√®rement

### üîí S√©curit√© des cl√©s
- Cl√©s stock√©es dans `config.json` (permissions 600)
- Possibilit√© d'utiliser variables d'environnement :
  ```bash
  export FREQTRADE_API_KEY='votre_cle'
  export FREQTRADE_SECRET_KEY='votre_secret'
  ```

## üìö Ressources utiles

- [Documentation Freqtrade](https://www.freqtrade.io/)
- [Strat√©gies communautaires](https://github.com/freqtrade/freqtrade-strategies)
- [Discord Freqtrade](https://discord.gg/p7nuUNVfP7)
- [Forum Trading](https://github.com/freqtrade/freqtrade/discussions)

## üÜò En cas de probl√®me

### V√©rifications de base
```bash
# Service actif ?
./service_control.sh status

# Logs d'erreur ?
./service_control.sh logs

# Configuration valide ?
freqtrade show-config --config config.json

# Test de connectivit√© exchange
freqtrade test-pairlist --config config.json
```

### Commandes de d√©pannage
```bash
# R√©installer Freqtrade
source $VENV_DIR/bin/activate
pip install --upgrade freqtrade[all]

# Nettoyer donn√©es corrompues
rm -rf user_data/data/*
./backtest.sh  # Ret√©l√©charge tout
```
DOC_EOF"
}

# Fonction de nettoyage et optimisation finale
final_cleanup() {
    log "üßπ Nettoyage final du syst√®me..."
    
    sudo apt autoremove -y
    sudo apt autoclean
    
    # Nettoyer les caches pip
    pip cache purge 2>/dev/null || true
    
    # Nettoyer les logs syst√®me anciens
    sudo journalctl --vacuum-time=7d
    
    log "‚úÖ Nettoyage termin√©"
}

# Fonction de v√©rification post-installation am√©lior√©e
verify_installation() {
    log "üîç V√©rification compl√®te de l'installation..."
    
    local issues=0
    
    echo "üìã R√âSUM√â DE L'INSTALLATION" | tee -a "$LOGFILE"
    echo "============================" | tee -a "$LOGFILE"
    echo "" | tee -a "$LOGFILE"
    
    # V√©rifications syst√®me
    echo "üñ•Ô∏è  SYST√àME" | tee -a "$LOGFILE"
    echo "----------" | tee -a "$LOGFILE"
    
    # Clavier
    if localectl | grep -q "X11 Layout: fr"; then
        echo "‚úÖ Clavier AZERTY configur√©" | tee -a "$LOGFILE"
    else
        echo "‚ùå Clavier AZERTY non configur√©" | tee -a "$LOGFILE"
        ((issues++))
    fi
    
    # Python
    if command -v python3 &> /dev/null; then
        echo "‚úÖ Python: $(python3 --version)" | tee -a "$LOGFILE"
    else
        echo "‚ùå Python non disponible" | tee -a "$LOGFILE"
        ((issues++))
    fi
    
    # pyenv
    for user in "$USER" "$FREQTRADE_USER"; do
        local user_home="/home/$user"
        if [ "$user" = "root" ]; then user_home="/root"; fi
        
        if [ -d "$user_home/.pyenv" ]; then
            echo "‚úÖ pyenv install√© pour $user" | tee -a "$LOGFILE"
        else
            echo "‚ùå pyenv manquant pour $user" | tee -a "$LOGFILE"
            ((issues++))
        fi
    done
    
    echo "" | tee -a "$LOGFILE"
    echo "üê≥ DOCKER & VIRTUALISATION" | tee -a "$LOGFILE"
    echo "-------------------------" | tee -a "$LOGFILE"
    
    if command -v docker &> /dev/null && docker --version &> /dev/null; then
        echo "‚úÖ Docker: $(docker --version | cut -d' ' -f3 | tr -d ',')" | tee -a "$LOGFILE"
        if groups "$USER" | grep -q docker && groups "$FREQTRADE_USER" | grep -q docker; then
            echo "‚úÖ Utilisateurs dans groupe docker" | tee -a "$LOGFILE"
        else
            echo "‚ö†Ô∏è  Utilisateurs pas tous dans groupe docker" | tee -a "$LOGFILE"
        fi
    else
        echo "‚ùå Docker non install√© ou non fonctionnel" | tee -a "$LOGFILE"
        ((issues++))
    fi
    
    echo "" | tee -a "$LOGFILE"
    echo "üóÑÔ∏è  BASES DE DONN√âES" | tee -a "$LOGFILE"
    echo "------------------" | tee -a "$LOGFILE"
    
    for service in postgresql mariadb redis-server; do
        if systemctl is-active --quiet "$service"; then
            echo "‚úÖ $service: actif" | tee -a "$LOGFILE"
        else
            echo "‚ö†Ô∏è  $service: inactif" | tee -a "$LOGFILE"
        fi
    done
    
    echo "" | tee -a "$LOGFILE"
    echo "üöÄ FREQTRADE" | tee -a "$LOGFILE"
    echo "------------" | tee -a "$LOGFILE"
    
    # Utilisateur freqtrade
    if id "$FREQTRADE_USER" &>/dev/null; then
        echo "‚úÖ Utilisateur $FREQTRADE_USER cr√©√©" | tee -a "$LOGFILE"
    else
        echo "‚ùå Utilisateur $FREQTRADE_USER manquant" | tee -a "$LOGFILE"
        ((issues++))
    fi
    
    # R√©pertoires
    if [ -d "$FREQTRADE_DIR" ]; then
        echo "‚úÖ R√©pertoire Freqtrade: $FREQTRADE_DIR" | tee -a "$LOGFILE"
    else
        echo "‚ùå R√©pertoire Freqtrade manquant" | tee -a "$LOGFILE"
        ((issues++))
    fi
    
    if [ -d "$VENV_DIR" ]; then
        echo "‚úÖ Environnement virtuel: $VENV_DIR" | tee -a "$LOGFILE"
    else
        echo "‚ùå Environnement virtuel manquant" | tee -a "$LOGFILE"
        ((issues++))
    fi
    
    # Configuration
    if [ -f "$FREQTRADE_DIR/config.json" ]; then
        echo "‚úÖ Configuration Freqtrade pr√©sente" | tee -a "$LOGFILE"
        if sudo -u "$FREQTRADE_USER" stat "$FREQTRADE_DIR/config.json" | grep -q "Access: (0600"; then
            echo "‚úÖ Permissions config.json s√©curis√©es" | tee -a "$LOGFILE"
        else
            echo "‚ö†Ô∏è  Permissions config.json √† v√©rifier" | tee -a "$LOGFILE"
        fi
    else
        echo "‚ùå Configuration Freqtrade manquante" | tee -a "$LOGFILE"
        ((issues++))
    fi
    
    # Scripts
    local scripts=("backtest.sh" "dry_run.sh" "hyperopt.sh" "setup_api.sh" "service_control.sh")
    local missing_scripts=0
    for script in "${scripts[@]}"; do
        if [ -f "$FREQTRADE_DIR/$script" ] && [ -x "$FREQTRADE_DIR/$script" ]; then
            echo "‚úÖ Script $script pr√©sent" | tee -a "$LOGFILE"
        else
            echo "‚ùå Script $script manquant ou non ex√©cutable" | tee -a "$LOGFILE"
            ((missing_scripts++))
        fi
    done
    
    if [ $missing_scripts -gt 0 ]; then
        ((issues++))
    fi
    
    # Strat√©gie
    if [ -f "$FREQTRADE_DIR/user_data/strategies/RSI_MACD_Strategy.py" ]; then
        echo "‚úÖ Strat√©gie RSI_MACD_Strategy install√©e" | tee -a "$LOGFILE"
    else
        echo "‚ùå Strat√©gie manquante" | tee -a "$LOGFILE"
        ((issues++))
    fi
    
    # Service systemd
    if [ -f "/etc/systemd/system/freqtrade.service" ]; then
        echo "‚úÖ Service systemd configur√©" | tee -a "$LOGFILE"
    else
        echo "‚ùå Service systemd manquant" | tee -a "$LOGFILE"
        ((issues++))
    fi
    
    echo "" | tee -a "$LOGFILE"
    
    # R√©sum√© final
    if [ $issues -eq 0 ]; then
        echo "üéâ INSTALLATION R√âUSSIE!" | tee -a "$LOGFILE"
        echo "========================" | tee -a "$LOGFILE"
    else
        echo "‚ö†Ô∏è  INSTALLATION AVEC $issues PROBL√àME(S)" | tee -a "$LOGFILE"
        echo "==========================================" | tee -a "$LOGFILE"
    fi
    
    echo "" | tee -a "$LOGFILE"
    echo "üéØ PROCHAINES √âTAPES:" | tee -a "$LOGFILE"
    echo "====================" | tee -a "$LOGFILE"
    echo "1. Red√©marrer votre session: logout/login ou 'newgrp docker'" | tee -a "$LOGFILE"
    echo "2. Tester l'installation:" | tee -a "$LOGFILE"
    echo "   sudo -u $FREQTRADE_USER bash -c 'cd $FREQTRADE_DIR && ./backtest.sh'" | tee -a "$LOGFILE"
    echo "3. Configurer vos cl√©s API:" | tee -a "$LOGFILE"
    echo "   sudo -u $FREQTRADE_USER bash -c 'cd $FREQTRADE_DIR && ./setup_api.sh'" | tee -a "$LOGFILE"
    echo "4. D√©marrer en mode simulation:" | tee -a "$LOGFILE"
    echo "   sudo -u $FREQTRADE_USER bash -c 'cd $FREQTRADE_DIR && ./dry_run.sh'" | tee -a "$LOGFILE"
    echo "" | tee -a "$LOGFILE"
    echo "üìö Documentation compl√®te: $FREQTRADE_DIR/README.md" | tee -a "$LOGFILE"
    echo "üìù Log d√©taill√©: $LOGFILE" | tee -a "$LOGFILE"
    
    return $issues
}

# Test de connectivit√© r√©seau
test_network() {
    log_info "Test de connectivit√© r√©seau..."
    
    if ping -c 1 8.8.8.8 &> /dev/null; then
        log_info "‚úÖ Connectivit√© r√©seau OK"
    else
        log_warning "‚ùå Probl√®me de connectivit√© r√©seau"
        return 1
    fi
    
    if curl -s --max-time 5 https://api.github.com &> /dev/null; then
        log_info "‚úÖ Acc√®s HTTPS OK"
    else
        log_warning "‚ùå Probl√®me d'acc√®s HTTPS"
        return 1
    fi
}

# Fonction principale
main() {
    log "üöÄ D√âMARRAGE INSTALLATION UBUNTU SERVER 24.04.3 LTS + FREQTRADE"
    log "=================================================================="
    log_info "Version du script: 2.0 (S√©curis√©e avec utilisateur d√©di√©)"
    log_info "Python cible: $PYTHON_VERSION (compatible TensorFlow/PyTorch)"
    log_info "Utilisateur Freqtrade: $FREQTRADE_USER"
    
    # V√©rifications pr√©liminaires
    check_root
    cleanup_logs
    
    # Test r√©seau
    if ! test_network; then
        log_error "Probl√®me de connectivit√©. V√©rifiez votre connexion Internet."
        exit 1
    fi
    
    # Cr√©ation utilisateur d√©di√© d√®s le d√©but
    create_freqtrade_user
    
    # Ex√©cution des √©tapes principales
    configure_keyboard
    update_system
    install_essential_tools
    install_package_managers
    install_network_tools
    install_databases
    install_python
    install_python_packages
    install_dev_tools
    install_docker
    install_swiss_army_tools
    install_freqtrade
    final_cleanup
    
    # V√©rification finale
    if verify_installation; then
        log "üéâ INSTALLATION TERMIN√âE AVEC SUCC√àS!"
    else
        log_warning "Installation termin√©e avec quelques probl√®mes - consultez les d√©tails ci-dessus"
    fi
    
    echo ""
    echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${GREEN}‚ïë                           üéâ INSTALLATION TERMIN√âE! üéâ                           ‚ïë${NC}"
    echo -e "${GREEN}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£${NC}"
    echo -e "${GREEN}‚ïë                                                                                  ‚ïë${NC}"
    echo -e "${GREEN}‚ïë  ‚úÖ Ubuntu Server 24.04.3 LTS configur√© (clavier AZERTY)                       ‚ïë${NC}"
    echo -e "${GREEN}‚ïë  ‚úÖ Python $PYTHON_VERSION install√© avec pyenv                                        ‚ïë${NC}"
    echo -e "${GREEN}‚ïë  ‚úÖ Environnement de d√©veloppement complet (Docker, bases de donn√©es)          ‚ïë${NC}"
    echo -e "${GREEN}‚ïë  ‚úÖ Freqtrade install√© avec utilisateur d√©di√© '$FREQTRADE_USER'                ‚ïë${NC}"
    echo -e "${GREEN}‚ïë  ‚úÖ Strat√©gie RSI+MACD optimis√©e configur√©e                                    ‚ïë${NC}"
    echo -e "${GREEN}‚ïë  ‚úÖ Service systemd pr√™t pour la production                                    ‚ïë${NC}"
    echo -e "${GREEN}‚ïë  ‚úÖ Scripts de gestion et documentation compl√®te                               ‚ïë${NC}"
    echo -e "${GREEN}‚ïë                                                                                  ‚ïë${NC}"
    echo -e "${GREEN}‚ïë  üéØ D√âMARRAGE RAPIDE:                                                            ‚ïë${NC}"
    echo -e "${GREEN}‚ïë     1. newgrp docker  # Recharger les groupes                                   ‚ïë${NC}"
    echo -e "${GREEN}‚ïë     2. sudo -u $FREQTRADE_USER bash -c 'cd $FREQTRADE_DIR && ./backtest.sh'           ‚ïë${NC}"
    echo -e "${GREEN}‚ïë     3. sudo -u $FREQTRADE_USER bash -c 'cd $FREQTRADE_DIR && ./setup_api.sh'          ‚ïë${NC}"
    echo -e "${GREEN}‚ïë                                                                                  ‚ïë${NC}"
    echo -e "${GREEN}‚ïë  üìÅ R√©pertoires:                                                                ‚ïë${NC}"
    echo -e "${GREEN}‚ïë     ‚Ä¢ Freqtrade: $FREQTRADE_DIR                                        ‚ïë${NC}"
    echo -e "${GREEN}‚ïë     ‚Ä¢ Venv Python: $VENV_DIR                                    ‚ïë${NC}"
    echo -e "${GREEN}‚ïë     ‚Ä¢ Secrets: $SECRETS_DIR (chmod 700)                                ‚ïë${NC}"
    echo -e "${GREEN}‚ïë                                                                                  ‚ïë${NC}"
    echo -e "${GREEN}‚ïë  üìñ Documentation: $FREQTRADE_DIR/README.md                            ‚ïë${NC}"
    echo -e "${GREEN}‚ïë  üìã Log complet: $LOGFILE                         ‚ïë${NC}"
    echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
}

# Gestion des erreurs avec contexte
trap 'log_error "Erreur ligne $LINENO dans la fonction ${FUNCNAME[1]:-main} - Code: $?"' ERR

# Gestion des signaux pour nettoyage
cleanup_on_exit() {
    local exit_code=$?
    if [ $exit_code -ne 0 ]; then
        log_error "Script interrompu avec le code $exit_code"
        log_info "Log complet disponible dans: $LOGFILE"
    fi
    exit $exit_code
}
trap cleanup_on_exit EXIT INT TERM

# V√©rification des pr√©requis syst√®me
check_system_requirements() {
    log_info "V√©rification des pr√©requis syst√®me..."
    
    # V√©rifier Ubuntu version
    if ! grep -q "24.04" /etc/os-release; then
        log_warning "Ce script est optimis√© pour Ubuntu 24.04. Votre version:"
        cat /etc/os-release | grep VERSION_ID
    fi
    
    # V√©rifier espace disque (minimum 10GB)
    local available_space=$(df / | tail -1 | awk '{print $4}')
    local min_space=10485760  # 10GB en KB
    
    if [ "$available_space" -lt "$min_space" ]; then
        log_error "Espace disque insuffisant. Minimum requis: 10GB"
        log_error "Espace disponible: $((available_space / 1024 / 1024))GB"
        exit 1
    fi
    
    # V√©rifier RAM (minimum 2GB)
    local total_ram=$(free -k | grep MemTotal | awk '{print $2}')
    local min_ram=2097152  # 2GB en KB
    
    if [ "$total_ram" -lt "$min_ram" ]; then
        log_warning "RAM faible d√©tect√©e: $((total_ram / 1024 / 1024))GB"
        log_warning "Minimum recommand√©: 2GB. Performances possiblement d√©grad√©es."
    fi
    
    log_info "‚úÖ Pr√©requis syst√®me v√©rifi√©s"
}

# Point d'entr√©e du script
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # V√©rifier les pr√©requis avant de commencer
    check_system_requirements
    
    # Lancer l'installation principale
    main "$@"
fi